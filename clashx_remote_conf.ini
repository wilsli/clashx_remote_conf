[uwsgi]

#uid = uwsgi
#gid = uwsgi

# 启用主进程
master = true

#no-orphans = true

# 进程数
processes = 1

# 线程数
threads = 1

# 切换工作目录。由于影响外部库的调用，应该设定为各外部库和uWSGI server编译安装的
# 环境根目录（conda install uwsgi时默认是conda环境的根目录）。若在虚拟环境中编
# 译安装了uWSGI，可指定虚拟环境的根目录作工作目录。
chdir = /usr/clashx_remote_conf/

# 默认环境语言编码
#env = PYTHONIOENCODING=UTF-8

# 主程序文件的路径
#wsgi-file = /usr/clashx_remote_conf/combine_yaml.py

# flask应用对象名，不可更改！
#callable = app

# 设置mount point为将要部署的nginx路径位置名里是('/clashxremote'）
# 应用则是.py程序的文件名（这里是'combine_yaml'，不含.py后缀）
# app是Flask程序的对象名（'app=Flask(__name__)'里定义）
mount = /clashxremote=combine_yaml:app

# 这个参数是由uWSGI管理脚本名称的意思，也就是uWSGI会根据nginx访问的目录和文件名调用Flask路由相应的脚本（即@app.route()修饰的不同函数）
manage-script-name = true

# 接口地址及端口。默认为本地9999端口--127.0.0.1:9999
http-socket = 127.0.0.1:9999
# nginx配置模板：
#   location /clashx {
#       proxy_pass  http://127.0.0.1:9999/;
#   }

# uwsgi接口地址及端口。默认为本地9090端口，可通过uwsgi_pass 127.0.0.1:9090转发。
#uwsgi-socket = 127.0.0.1:9090
#
# socket接口文件，注意放在一个nginx有访问权的目录
# nginx通过uwsgi_pass unix:/usr/clashx_remote_conf/clashxremote.sock转发请求
uwsgi-socket = /usr/clashx_remote_conf/clashxremote.sock
# nginx配置模板：
#   location = /clashxremote { rewrite ^ /clashxremote/; }
#   location /clashxremote { try_files $uri @clashxremote; }
#   location @clashxremote {
#        include uwsgi_params;
#        uwsgi_pass unix:/usr/clashx_remote_conf/clashxremote.sock;
#   }

# 将socket文件的所有权分配给nginx的用户和组（与nginx.conf中的值对应）
chown-socket = nginx:nginx
# 设置socket文件的读写权限
chmod-socket = 666

# 工作的虚拟环境
virtualenv = /opt/miniconda3
